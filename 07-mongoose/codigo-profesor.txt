//CONEXION MONGOOSE 
const mongoose = require('mongoose');
const user = '';
const passwd = '';
const database = '';
const connectionString = `mongodb+srv://${user}:${passwd}@cluster0.ktvc2qg.mongodb.net/${database}?retryWrites=true&w=majority`

mongoose.connect(connectionString)
    .then(() => {
        console.log('Dabase connected')
    }).catch(err => {
        console.error(err)
    })



//ENRUTADO
const { Router } = require('express');
const router = Router();
const getManufacters = require('../services/serviceManufacters.js');

router.get('/', async (request, response, next) => {
    try {
        const docs = await getManufacters();
        console.log(docs);
        response.json(docs).status(200);
    } catch (err) { next(err) }
});

module.exports = router;



//MODELO
const { model, Schema } = require('mongoose');

//Creamos esquema
const manufacterSchema = new Schema({
    name: String,
    cif: String,
    address: String
});

//Creamos modelo
const Manufacter = model('Manufacter', manufacterSchema);

module.exports = Manufacter;



//SERVICIO
const Manufacter = require('../models/Manufacter.js');

const getManufacters = async () => {
    return await Manufacter.find({}).exec();
}

module.exports = getManufacters;



SCRIPT PARA DAR DE ALTA LOS PRODUCTOS RELACIONÁNDOLOS CON EL OBJECT ID DE SUS FABRICANTES: 

require('./mongo.js');
const Product = require('./models/Product.js');
const Manufacter = require('./models/Manufacter.js');
const products = require('./modules/products');
const manufacters = require('./modules/manufacters');

const createdb = async (resquest, response) => {
    await Product.deleteMany({});
    await Manufacter.deleteMany({});

    const newManufacters = await Manufacter.insertMany(manufacters);
    const newProducts = products.map( product => {
        const manufacter = newManufacters.filter((manufacter) => manufacter.cif === product.manufacter)[0];
        const { _id, name } = manufacter;
        return {
            ...product,
            manufacter: { _id, name }
        }
    });
    await Product.insertMany(newProducts);
};

createdb();